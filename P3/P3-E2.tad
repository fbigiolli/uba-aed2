// El grado debe ser igual a n
// El elemento n del coeficiente debe ser distinto de 0 para que el grado sea valido

invariante de representación:
  Rep: estr → bool
  (∀e: estr) Rep(e) ≡ true ⇔ e.grado = n ∧L e.coef[e.grado] > 0

  función de abstracción:
    Abs: estr e → polinomio { Rep(e) }
    (∀e: estr) Abs(e) =obs p | 
    (∀n: nat)(evaluar(p,n) = evaluarArray(0,π2(e))

// Asumiendo que al pasar por la funcion de abstraccion, el array pasa de ser parte del modulo array
// al TAD arreglo dimensionable se tienen a disposicion las operaciones del mismo.

evaluarArrayDesde extiende TAD ARREGLO DIMENSIONABLE

evaluarArrayDesde: grado × ad × n → nat

evaluarArrayDesde(gr,a,n) ≡ if gr =obs tam(a) then
                              a[i]*(n^gr)
                            else
                              a[i]*(n^gr) + evaluarArrayDesde(gr+1,a,n)
                            fi 
//evaluarArrayDesde evalua el polinomio en un n dado empezando por el coeficiente independiente, y teniendo como
//caso base el momento en el que se llega al mayor grado posible en el polinomio. Notar que el contexto en el que
//es llamada en la funcion de abstraccion es lo que hace que arranque desde el C.I., evaluando de esta forma
//todo el polinomio y no solo una parte.


Interfaz

    se explica con: Polinomio

    géneros: polinomio

    operaciones:
        cte(in k: nat) → res: polinomio
        Pre ≡ {true}
        Post ≡ {res =obs Cte(k)}
        Descripción: Genera un polinomio grado 0
        Complejidad: Θ(...) // creo que estos 2 no se completan todavia, los dejo en blanco
        Aliasing: ...

        X() → res:polinomio
        Pre ≡ {true}
        Post ≡ {res =obs X()}
        Descripción: Genera un polinomio grado 1

        suma(in a:polinomio, in b:polinomio) → res:polinomio
        Pre ≡ {true}
        Post ≡ {res =obs a + b}
        Descripción: Suma dos polinomios

        producto(in a:polinomio, in b:polinomio) → res:polinomio
        Pre ≡ {true}
        Post ≡ {res =obs a * b}
        Descripción: Multiplica dos polinomios

        evaluar(in p:polinomio, in n:nat) → res:nat
        Pre ≡ { true }
        Post ≡ { res =obs evaluar(p,n) }
        Descripción: Evalua los polinomios (y si, que va a hacer)

    algoritmos:
      // la idea es hacerlo en pseudocodigo, aca va en c++
        iFunción(in arg1: α, in/out arg2: algo(α)) → res: bool
            int evaluarArray(array a, int n){
              res = 0;
              for(int i=0 , i<a.size(), i++){
                res += a[i] * n; 
              }
              return res;
            } 

Fin Interfaz
