TAD CCC

    géneros: ccc

    exporta: algo, observadores básicos, generadores

    usa: bool, nat

    observadores básicos:
        maestros: ccc → conj(carpintero) // todo carpintero q pertenezca aca tiene que tener lvl 10
        aprendices: ccc → conj(carpintero)
        tutor: carpintero ca × ccc c → carpintero {ca ∈ aprendices(c)}
        nivel: carpintero ca × ccc c → c          {ca ∈ aprendices(c)}
        desertores: ccc → conj(carpintero)

    generadores:
        nuevoCCC: conj(carpintero) m → ccc {(∀c:carpintero)(c ∈ m ⟹ nivel(c) =obs 10)} //restriccion de nivel porque son los maestros carpinteros
        ingresaCarpintero: carpintero ca × ccc → ccc {ca ∉ desertores(c)}
        subeNivel: carpintero ca × ccc c → ccc {ca ∈ aprendices(c)}
        desertar: carpintero ca × ccc c → ccc {ca ∈ aprendices(c) ∨ maestros(c) ∧ c ∈ maestros(c) ⟹ #maestros(c) > 1} //hay un abuso de notacion para no escribir dos veces la pertenencia. La segunda restriccion es por enunciado.
         

    otras operaciones:
        tutorValido: nivel × conj(carpintero) → carpintero // le paso un conjunto y me devuelve los que son de mayor nivel (la voy a usar pasandole maestros union aprendices)  

    axiomas:
        maestros(nuevoCCC(ms)) ≡ ms
        maestros(ingresaCarpintero(...)) ≡ maestros(c)
        maestros(subeNivel(ca,c)) ≡ if nivel(ca) =obs 9 then Ag(ca,maestros(c)) else maestros(c) fi
        maestros(desertar(ca,c)) ≡ if ca ∈ maestros(c) then maestros(c) - {ca} else maestros(c) fi

        aprendices(nuevoCCC(ms)) ≡ ∅
        aprendices(ingresaCarpintero(ca,c)) ≡ Ag(ca,aprendices(c))
        aprendices(subeNivel(ca,c)) ≡ if nivel(ca) = 9 then aprendices(c) - {ca} else aprendices(c) fi
        aprendices(desertar(ca,c)) ≡ if ca ∈ aprendices(c) then aprendices(c) - {ca} else aprendices(c) fi

        tutor(ca,nuevoCCC) // no tiene sentido 
        tutor(ca1,ingresaCarpintero(ca2,c)) ≡ if ca1 =obs ca2 then
                                                tutorValido(1 , maestros(c) U aprendices(c))
                                            else
                                                tutor(ca1)
                                            fi
        tutor(ca1,subeNivel(ca2,c)) ≡ if ca1 =obs ca2 then
            tutorValido(nivel(ca1,c)+1 , c)
        else
            tutor(ca1)
        fi
        tutor(ca1,desertar(ca2,c)) ≡ if tutor(ca1) =obs ca2 then //si se va el maestro
                                        tutorValido(nivel(ca1,c),c) //busco nuevo tutor
                                    else
                                        tutor(ca1,c) // voy a tomar como decision que si el alumno deserta se sigue manteniendo a aquel tutor que tenia, aunque ya no curse mas. 
                                    fi


        nivel(ca,nuevoCCC(..)) // no tiene sentido
        nivel(ca1,ingresaCarpintero(ca2,c)) ≡ if ca1 =obs ca2 then 1 else nivel(ca1) fi
        nivel(ca1,subeNivel(ca2,c)) ≡ if ca1 =obs ca2 then nivel(ca1) + 1 else nivel(ca1) fi
        nivel(ca1,desertar(ca2,c)) ≡ nivel(ca1)

        desertores(nuevoCCC(ms)) ≡ ∅
        desertores(ingresaCarpintero(...)) ≡ desertores(c)
        desertores(subeNivel(...)) ≡ desertores(c)
        desertores(desertar(ca,c)) ≡ Ag(ca,desertores(c))

        tutorValido(niv,carps) ≡ if nivel(dameUno(carps)) > niv then // chequeamos que el nivel le permita ser tutor, en caso de que no seguimos buscando. Notar que no hace falta fijarse que no sea el mismo carpintero al que le estamos buscando tutor ya que al no tener un menorigual en el nivel nunca va a aparecer como posible opcion de tutor.
                                    dameUno(carps)
                                else
                                    tutorValido(sinUno(carps))
                                fi


Fin TAD