// Ejercicio 1.

estr es tupla <mesas: diccTrie(mesa,tupla(votantes:conjLineal(DNI),votosPorAg:array(nat)))
			   repetidos: conjAVL(DNI)
			   mesasDondeVoto: diccAVL(DNI, tupla(#votos,iteradorARepetidos))
			   votosPorAgrupacion: array(nat) // Donde cada indice representa una agrupacion, respetando el orden en que fueron enumeradas.	
			   agrupacionesPorCandidato: diccAVL(candidato,agrupacion),



iRegistrar

// Primero borramos la informacion anterior
votantes ← significado(mesas,m).first

for dni in votantes	// O(va)
	votanteActual ← significado(mesasDondeVoto,dni) // O(logv)
	if votanteActual.first == 2 // O(1)
		eliminarSiguiente(votanteActual.second) // O(1)
		definir(mesasDondeVoto,dni,makePair(votanteActual.first - 1, null)) // O(logv)
	end if
	else
		definir(mesasDondeVoto,dni,makePair(votanteActual.first - 1, votanteActual.second)) // O(logv)
end for	


arrayVotos ← array[largo(votosPorAgrupacion)]
for agrupacion in as 			// O(va)
	arrayVotos[agrupacion] += 1
	votosPorAgrupacion[agrupacion] += 1
end for

definir(mesas,m,makePair(ds,arrayVotos)) // O(|m|)

for dni in ds // O(Va)
	if not definido?(mesasDondeVoto,dni) // O(V) 
		definir(mesasDondeVoto,dni,makePair(1,null)) // O(logv)
	end if
	else
		votanteActual ← significado(mesasDondeVoto,dni) // O(logV)
		if votanteActual.first == 1 // 0(1)
			iteradorARepetido ← agregarRapido(repetidos,dni) // O(1)
			definir(mesasDondeVoto,dni,makePair(2,iteradorARepetido)) //O(logV)
		end if
		else
			definir(mesasDondeVoto,dni,makePair(votanteActual.first + 1,votanteActual.second)) // O(logv)

			
Complejidad total final: O(va*logV + |m|)


// Ejercicio 3

cadenaMasLargaAux(in:A(array), in cadenasAcum:vector(tripla<b,p,q>), in max:nat )

if A.size == 1 //O(1) // caso base
	tuplaDescompuesto ← descomponer(A[0]) 
	vector<tripla> cadenasAcum
	cadenasAcum.push_back(<tuplaDescompuesto.first,tuplaDescompuesto.second,tuplaDescompuesto.second>)
	return todo lo otro
	
recIzq ← cadenaMasLargaAux(A[0,n/2])  T(n/2)
recDer ← cadenaMasLargaAux(A[n/2,n])  T(n/2)

itIzq ← crearIt(recIzq.cadenasAcum)
itDer ← crearIt(recDer.cadenasAcum)
vector<tripla> cadenasAcum

while haySiguiente(itDer) && haySiguiente(itIzq)
	if siguienteSignificado(itIzq).first == siguienteSignificado(itDer).first && siguienteSignificado(itIzq).third + 1 == siguienteSignificado(itDer).second
		cadenasAcum.push_back(siguienteSignificado(itIzq).first,siguienteSignificado(itIzq).second,siguienteSignificado(itDer).third)
	avanzar(itDer) 
	avanzar(itIzq)

	else
		if siguienteSignificado(itIzq).first < siguienteSignificado(itDer).first
			cadenasAcum.push_back(siguienteSignificado(itIzq))
		else
			cadenasAcum.push_back(siguienteSignificado(itDer))
	end if















cadenaMasLargaAux(in:A(Array) out 

	if A.size == 1 //o(1)
	then
		if()


⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀