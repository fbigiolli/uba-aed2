// El invariante de representacion debe cumplir:
// la altura definida en la tupla debe coincidir con la que se calcula en el arbol en si.
// si izq o der no son nil, entonces la raiz tampoco puede serlo
// creo que esto es todo pero tengo dudas. No se si haga falta alguna condicion mas

// La funcion de abstraccion basada en observadores se puede definir como
// e.raiz = raiz(ab), en caso de que tenga hijos e.izq = izq(ab) y e.der = der(ab)



//para calcular la altura una posible idea es hacer el maximo entre la altura de ambos hijos
// y asi recursivamente en los hijos de los hijos, etc

invariante de representación:
  Rep: estr → bool
  (∀e: estr) Rep(e) ≡ true ⇔ (altura(construirAB(e)) = e.altura) ∧ (¬(e.izq = NULL) ∨ ¬(e.der = NULL) ⟹ ¬(e.raiz = NULL))
// no se si esta del todo bien, pero la idea es que si el puntero apunta a algo que no contiene ningun tipo de dato deberia dar null,
// sabiendo esto puedo decir que si el hijo izquierdo o derecho del AB no son null (es decir, que hay algun dato) entonces la raiz
// no puede ser null, ya que en ese caso no seria posible representar el AB.


// f. abstraccion usando generadores

abs(e) = construirAB(e)

construirAB(e) ≡ if e.altura = 0 then
                  nil()
                else
                  bin(construirAB(e.izq),e.raiz,construirAB(e.der))
                fi

// lo hago con recursion, solamente tomo la estructura como entrada y en caso de que 
//la altura sea 0 entonces devuelvo un ab vacio con nil, y en caso contrario agrego
//la raiz al bin que estoy construyendo y llamo a la funcion con los hijos para agregarlos.

función de abstracción:
  Abs: estr e → ab { Rep(e) }
  (∀e: estr) Abs(e) =obs a | e.raiz = raiz(a) ∧ hijoIgual(e.izq,a) ∧ hijoIgual(e.der,a)

hijoIgual(e,a) ≡ if nil?(a) ∧ e.raiz = NULL then 
  true // si llego al vacio y no tuve un false antes, entonces todo coincidio y son iguales
else
  if e.raiz = raiz(a) then
    hijoIgual(e,izq(a)) ∧ hijoIgual(e,der(a))
  else
    false
  fi
fi