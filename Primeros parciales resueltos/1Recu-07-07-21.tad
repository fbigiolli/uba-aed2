// Ejercicio 1. 

TAD MulticonjuntoExtendido extiende Multiconjunto

otras operaciones:
  eliminarTodos: mconj × nat → mconj
  Nrepetidos: mconj × nat → conj
  maxRepetidos: mconj m → conj {¬(∅?(m))}
  maxConjNrepetidosPosible: mconj × nat → conj

axiomas: ∀mconj:multiconj(α), ∀elem : α, ∀n:nat

eliminarTodos(mconj,elem) ≡ if ¬(elem ∈ mconj) then
                            mconj
                           else
                              eliminarTodos(mconj-{elem},elem)
                           fi

Nrepetidos(mconj,n) ≡ if ∅?(mconj) then
  ∅
else
  if #(dameUno(mconj),mconj) ≥ n then
    Ag(dameUno(mconj),Nrepetidos(eliminarTodos(mconj,dameUno(mconj),n))
  else
    Nrepetidos(eliminarTodos(mconj),n)
  fi
fi
//Nota: Creo que es valido usar sinUno en vez de eliminarTodos para la recursion, pero
//llegariamos al mismo resultado porque no puede haber elem repetidos en el conjunto
//respuesta, y de esta forma el procedimiento es mas eficiente.


maxRepetidos(mconj) ≡ maxConjNrepetidosPosible(mconj,1)

//La idea es calcular el conjunto de Nrepetidos con el mayor n posible. Cuando tengo el caso
//en el que no hay Nrepetidos, devuelvo el conjunto de Nrepetidos anterior y esos seran los 
//max repetidos.
maxConjNrepetidosPosible(mconj,n) ≡ if ∅?(Nrepetidos(mconj,n+1)) then
  Nrepetidos(mconj,n)
else
  maxConjNrepetidosPosible(mconj,n+1)
fi 


// Ejercicio 2.

TAD Tablero

    géneros: algo

    exporta: algo, observadores básicos, generadores

    usa: bool, nat

    observadores básicos:
        tamano: tablero → (nat,nat)
        posCabezal: tablero → posicion
        celdasConBolita: tablero → conj{celda}
        bolitasEnCelda: tablero t × color → nat {posCabezal(t) ∈ celdasConBolita(t)}
        // Hago esta restriccion para no tener que axiomatizar dos veces lo que pasaria al salirme del tablero con el cabezal.
        // Ademas, al saber cuales celdas tienen bolita con el observador anterior no es necesario acceder a las celdas que ya
        // sabemos que no tienen una bolita para caracterizar el tablero.

    generadores:
        nuevoTablero: → tablero
        moverCabezal: direccion × tablero → tablero
        ponerBolita: color c × tablero → tablero {c ∈ color} // con esto hago ref al TAD color, no se si es del todo correcto

    otras operaciones:
        esBorde?: posicion × tablero → bool
        movioAfueraArriba: direccion × tablero → bool
        movioAfueraAbajo: direccion × tablero → bool
        movioAfueraIzq: direccion × tablero → bool 
        movioAfueraDer: direccion × tablero → bool
        valorDireccion: direccion → (nat,nat)
        actualizarPosicionBolitas: (nat,nat) × conj{celda} × conj{celda} → conj{celda}

    axiomas: ∀d:direccion, ∀t:tablero, ∀p:posicion, ∀c,c1,c2:color, ∀bolitas:conj{celda}, ∀valDir:(nat,nat)
        tamano(nuevoTablero) ≡ (1,1)
        tamano(moverCabezal(d,t)) ≡ if movioAfueraArriba?(d,t) ∨ movioAfueraAbajo?(d,t) then
                                      tamano(t) + (1,0)
                                    else
                                      if movioAfueraIzq(d,t) ∨ movioAfueraDer(d,t) then
                                        tamano(t) + (0,1)
                                      else
                                        tamano(t)
                                      fi
                                    fi

        tamano(ponerBolita(c,t)) ≡ tamano(t)

        posCabezal(nuevoTablero) ≡ (1,1)
        posCabezal(moverCabezal(d,t)) ≡ if movioAfueraArriba(d,t) ∨ movioAfueraDer(d,t) ∨ movioAfueraAbajo(d,t) ∨ movioAfueraIzq(d,t) then
                                          posCabezal(d,t)
                                          //Devuelvo la misma posicion porque en el caso de que se mueva para afuera, se agrega la columna y la posicion del cabezal en el nuevo
                                          //tablero sigue siendo la misma, solamente se actualiza la posicion del resto de celdas
                                        else
                                          posCabezal(d,t) + valorDireccion(d)
                                        fi

        posCabezal(ponerBolita(c,t)) ≡ posCabezal(t)

        celdasConBolita(nuevoTablero) ≡ ∅
        celdasConBolita(ponerBolita(c,t)) ≡ if ¬(posCabezal(t) ∈ celdasConBolita(t))  then
                                              Ag(posCabezal(t),celdasConBolita(t))
                                            else
                                              celdasConBolita(t)
                                            fi

        celdasConBolita(moverCabezal(d,t)) ≡ if movioAfueraArriba(d,t) ∨ movioAfueraDer(d,t) ∨ movioAfueraAbajo(d,t) ∨ movioAfueraIzq(d,t) then
          actualizarPosicionBolitas(valorDireccion(d),bolitasEnCelda(t),∅)
        else
          celdasConBolita(t)
        fi

        bolitasEnCelda(nuevoTablero,c) ≡ 0
        bolitasEnCelda(moverCabezal(d,t),c) ≡ nroBolitas(posCabezal(t),c)
        bolitasEnCelda(ponerBolita(c1,t),c2) ≡ nroBolitas(poner(posCabezal(t),c1),c2)

        ----------- otras operaciones ----------- 

        //La idea de esta funcion es: Segun el movimiento que hayamos hecho del cabezal, entonces tenemos o que correr todas las bolitas 1 posicion arriba
        //o abajo, o 1 posicion izquierda o derecha (valDir). Entonces, le paso el conjunto de bolitas que tenia el tablero sin actualizar, y un conjunto  res
        //vacio, y voy guardando todas las direcciones actualizadas en res, para despues devolverlo como resultado del nuevo conjunto de bolitas.

        actualizarPosicionBolitas(valDir,,bolitas,res) ≡ if ∅?(bolitas) then
          res
        else
          actualizarPosicionBolitas(valDir,sinUno(bolitas,Ag(dameUno(bolitas)) + valDir,res)) 
        fi

        movioAfueraArriba(d,t) ≡ if π1(posCabezal(t)) =obs 0 ∧ d =obs norte then
          true
        else
          false
        fi

        movioAfueraAbajo(d,t) ≡ if π1(posCabezal(t)) =obs tamano(t) ∧ d =obs sur then
          true
        else
          false
        fi

        movioAfueraDer(d,t) ≡ if π2(posCabezal(t)) =obs tamano(t) ∧ d =obs este then
          true
        else
          false
        fi

        movioAfueraIzq(d,t) ≡ if π2(posCabezal(t)) =obs 0 ∧ d =obs oeste then
          true
        else
          false
        fi

        valorDireccion(d) ≡ if d=obs norte then
          (1,0)
        else
          if d=obs sur then
            (-1,0)
          else
            if d=obs este then
              (0,1)
            else
              (0,-1)
            fi
          fi
        fi

Fin TAD

// Ejercicio 4.

La complejidad de mejor caso es cuando la matriz es vacia, ya que 
la guarda del while nunca va a ser true porque i se inicializa en 0, y n tambien en 0, entonces
al comparar 0<0 obtengo false, por lo tanto no entro al ciclo y la complejidad es θ(1)
Ademas, tambien obtengo complejidad θ(1) cuando el segundo elemento de la primer fila no es 0, ya que 
entro al while, evaluo la primer posicion, paso a la segunda y al encontrarme que el elemento es distinto de 0
termino el while y devuelvo false.

Por otro lado, la complejidad de peor caso es θ(M), que corresponde a la familia de matrices diagonales,
ya que para asegurarnos de que efectivamente sean diagonales el algoritmo recorre la matriz entera.

//Nota: M es n*n donde n es el numero de filas y columnas de la matriz

// Ejercicio 5.

Para que sea una estructura valida, el Invariante de representación debe cumplir:
1. Que una persona pertenezca a la secuencia de vacunados para alguna ciudad implica que su residencia es en dicha ciudad.
2. Que una persona pertenezca al conjunto de personas esperando para alguna ciudad implica que su residencia es en dicha ciudad.
3. En el conjunto de frascos no puede haber dos tuplas que tengan la misma ciudad como parametro.
4. Todos aquellos que pertenezcan al diccionario de vacunados no pueden pertenecer al diccionario esperando.
5. Por dato del enunciado, que haya frascos disponibles en una ciudad implica que no hay mas de 4 personas esperando por la vacuna.
11. Una persona no puede estar vacunada mas de una vez.

invariante de representación:
  Rep: estr → bool
  (∀e: estr) Rep(e) ≡ true ⇔ (1) ∧ (2) ∧ (3) ∧ (4) ∧ (5) ∧ (11)

(1) ≡ (∀c:ciudad)((c ∈ claves(e.vacunados)) ⟹L ((∀p:persona)(esta?(p,obtener(c,e.vacunados)) ⟹ (def?(p,e.residencia) ∧L obtener(p,e.residencia) = c)
(2) ≡ (∀c:ciudad)((c ∈ claves(e.vacunados)) ⟹L ((∀p:persona)(p ∈ obtener(c,e.vacunados)) ⟹ (def?(p,e.residencia) ∧L obtener(p,e.residencia) =obs c))
(3) ≡ (∀t1:<ciudad,nat>)(t1 ∈ e.frascos ⟹ ¬(∃t2:<ciudad,nat)(t2 ∈ e.frascos ∧ π1(t1) = π1(t2)))
(4) ≡ (∀c:ciudad)((c ∈ claves(e.vacunados)) ⟹L ((∀p:persona)(esta?(p,obtener(c,e.vacunados))) ⟹ ¬(p ∈ obtener(c,e.esperando))))
(5) ≡ (∀t:<ciudad,nat>)((t ∈ e.frascos ∧ π2(t) > 0) ⟹ (def?(π1(t),e.esperando) ∧L #(obtener(π1(t),e.esperando)) < 5))
(11) ≡ (∀p1,p2:persona)((esta?(p1,obtener(c,e.vacunados)) ∧ esta?(p2,obtener(c,e.vacunados))) ⟹ p1 ≠ p2)

función de abstracción:
  Abs: estr e → sv { Rep(e) }
  (∀e: estr) Abs(e) =obs sv | (6) ∧ (7) ∧ (8) ∧ (9) ∧ (10)

//Todas las ciudades del TAD estan representadas en los diccionarios y conjuntos de la estructura.
(6) ≡ (∀c:ciudad)(c ∈ ciudades(sv) ⟹ (c ∈ claves(e.vacunados) ∧ c ∈ claves(e.esperando) ∧
                                        (∃t:<ciudadTupla,nat>)(ciudadTupla = c ∧ t ∈ e.frascos))
//Nota: Uso el existe para la tupla porque anteriormente en el invariante pedi que no hubiera tuplas con ciudad repetida. De esta forma,
//El existe apunta a la unica tupla posible que hay.

//La residencia de las personas definidas en la estructura se corresponde con las del TAD.
(7) ≡ (∀p:persona)((def?(p,e.residencia) ∧L obtener(p,e.residencia) ∈ ciudades(sv) ) ⟹ (p ∈ residentes(sv,(obtener(p,e.residencia)))))  

//Toda persona que este vacunada en la estructura tambien debe estarlo en el TAD.
(8) ≡ (∀c:ciudad)(c ∈ ciudades(sv) ⟹L (∀p:persona)(esta?(p,obtener(c,e.vacunados)) ⟹ p ∈ vacunados(c,sv)))

//Toda persona que este esperando en la estructura tambien debe estarlo en el TAD.
(9) ≡ (∀c:ciudad)(c ∈ ciudades(sv) ⟹L ((∀p:persona)(p ∈ obtener(c,e.esperando) ⟹ p ∈ esperando(c,sv))

//La cantidad de frascos guardada en el conjunto de tuplas se corresponde con la del TAD. 
(10) ≡ (∀c:ciudad)(c ∈ ciudades(sv) ⟹L (∀t:<ciudadTupla,nFrascos:>)(c = ciudadTupla ∧ nFrascos = #frascosPorCiudad(sv,c)))
//Nota: Uso el para todo porque anteriormente en el invariante pedi que hubiera maximo UNA tupla por ciudad, por lo tanto se que esta tupla es unica.

